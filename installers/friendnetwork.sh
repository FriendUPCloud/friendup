#!/bin/sh

#
# Friend Network installation script
# Only works if build/cfg/setup.ini is defined
# To define it, run .install.sh and choose to install Friend Network
#
# Once setup.ini has been created or modified, this script can be run
# at any time
#

# Define directories
FRIEND_FOLDER=$(pwd)

# Get directory from Config file
. "$FRIEND_FOLDER/Config"
FRIEND_BUILD="$FRIEND_PATH"
if [ -z "$FRIEND_BUILD" ]; then
    echo "Config file not found, aborting."
    exit 1
fi

# Root or not?
mkdir "$FRIEND_BUILD/tryout" > /dev/null 2>&1
if [ $? -eq "0" ]; then
    SUDO=""
    rm -rf "$FRIEND_BUILD/tryout"
else
    SUDO="sudo"
fi

# Checks if Friend is installed with a setup.ini file
if [ ! -f "$FRIEND_BUILD/cfg/setup.ini" ]
then
    dialog --backtitle "Friend Network Installer" --msgbox "\
Installation information not found.\n\
Please run the Friend Core install.sh script first.\n\n\
Aborting Friend Network installation." 10 70
    clear
	exit 1
fi

# Checks if Friend Network is enabled
enabled=$(sed -nr "/^\[FriendNetwork\]/ { :l /^enable[ ]*=/ { s/.*=[ ]*//; p; q;}; n; b l;}" "$FRIEND_BUILD/cfg/setup.ini")
if [ "$enabled" != "1" ]; then
    dialog --backtitle "Friend Network Installer" --msgbox "\
Friend Network is not enabled.\n\
Please restart Friend Core install.sh script,\n\n\
enable Friend Network and enter the proper values." 11 70
    clear
    exit 1
fi

# Checks if TLS keys are defined
TLS="0"
if [ -f "$FRIEND_BUILD/cfg/crt/key.pem" ]
then
    TLS="1"
fi

# Gather data from the setup.ini file
friendCoreDomain=$(sed -nr "/^\[FriendCore\]/ { :l /^domain[ ]*=/ { s/.*=[ ]*//; p; q;}; n; b l;}" "$FRIEND_BUILD/cfg/setup.ini")
turnAddress=$(sed -nr "/^\[TurnStun\]/ { :l /^turn[ ]*=/ { s/.*=[ ]*//; p; q;}; n; b l;}" "$FRIEND_BUILD/cfg/setup.ini")
stunAddress=$(sed -nr "/^\[TurnStun\]/ { :l /^stun[ ]*=/ { s/.*=[ ]*//; p; q;}; n; b l;}" "$FRIEND_BUILD/cfg/setup.ini")
turnUser=$(sed -nr "/^\[TurnStun\]/ { :l /^user[ ]*=/ { s/.*=[ ]*//; p; q;}; n; b l;}" "$FRIEND_BUILD/cfg/setup.ini")
turnPass=$(sed -nr "/^\[TurnStun\]/ { :l /^pass[ ]*=/ { s/.*=[ ]*//; p; q;}; n; b l;}" "$FRIEND_BUILD/cfg/setup.ini")

# Installs node.js
echo "Checking for node.js and npm"

nv=$(node -v)
npm=$(npm -v)
if [ -z $nv ]; then
    dialog --backtitle "Friend Network Installer" --yesno "\
Friend Network needs Node.js to work and it was not found.\n\n\
Choose YES to install it automatically\n\
or NO to install it manually: the script will\n\
exit, you install node and restart the script.\n\
Please note that you also need to install 'npm' and 'n'." 15 65
    if [ $? -eq "0" ]; then
		curl -L https://git.io/n-install | sh
    dialog --backtitle "Friend Network Installer" --msgbox "\
After installation, node needs variables defined by .bashrc to run.\n\
Unfortunately there is no option to run this script from\n\
another script (please contact us if you find one that works)\n\
This script will now end. Open a new shell and restart\n\
install.sh with the -s option (you will not be asked for\n\
information again)..."  15 70
		exit 1
    else
        clear
        echo "Aborting Friend Network installation."
        exit 1
    fi
fi

if [ "$nv" \< "v4.5.0" ]; then
    dialog --backtitle "Friend Network Installer" --yesno "\
Warning! node version found: $nv.\n\
Recommended version: v4.5.0 and above.\n\n\
Choose YES to switch to version 4.5.0,\n\
or NO to abort this script..." 11 60
    if [ $? -eq "0" ]; then
        echo "Calling 'n' to change the version of node."
        n stable
    else
        clear
        echo "Aborting Friend Network installation."
        exit 1
    fi
fi

if [ -z "$npm" ]; then
    dialog --backtitle "Friend Chat installer" --msgbox "\
Node was found, but not npm. \n\
Please install npm and restart the script." 10 70
    clear
    echo "Aborting Friend Chat installation."
	exit 1
fi

# Pokes the new values in the services/FriendNetwork/config.js file
fnetPath="$FRIEND_FOLDER/services/FriendNetwork"
$SUDO cp "$fnetPath/example.config.js" "$fnetPath/config.js"
$SUDO sed -i -- "s@friendcore_host@$friendCoreDomain@g" "$fnetPath"/config.js
$SUDO sed -i -- "s@stun_url.com@$turnAddress@g" "$fnetPath"/config.js
$SUDO sed -i -- "s@turn_url.com@$turnAddress@g" "$fnetPath"/config.js
$SUDO sed -i -- "s@turn_username@$turnUser@g" "$fnetPath"/config.js
$SUDO sed -i -- "s@turn_password@$turnPass@g" "$fnetPath"/config.js
$SUDO sed -i -- "s@Do not edit this file!@This file can be edited@g" "$fnetPath"/config.js
if [ "$TLS" -eq "1" ]; then
    $SUDO sed -i -- "s@//keyPath : 'path_to_key.pem'@keyPath : '$FRIEND_BUILD/cfg/crt/key.pem'@g" "$fnetPath"/config.js
    $SUDO sed -i -- "s@//certPath : 'path_to_certificate.pem'@certPath : '$FRIEND_BUILD/cfg/crt/certificate.pem'@g" "$fnetPath"/config.js
fi

# Installs files
destPath="$FRIEND_BUILD/services/FriendNetwork"
$SUDO rsync -ravl \
	--exclude "$fnetPath/.git*" \
	--exclude "$fnetPath/example.update_to_fup.sh" \
	"$fnetPath/." "$destPath"
cd "$destPath"
npm install
cd "$FRIEND_FOLDER"

# Copy server autostart
if [ ! -d "$FRIEND_BUILD/autostart" ]; then
    $SUDO mkdir "$FRIEND_BUILD/autostart"
fi
$SUDO cp "$FRIEND_FOLDER/installers/startfriendnetwork.sh" "$FRIEND_BUILD/autostart/startfriendnetwork.sh"
$SUDO chmod +x "$FRIEND_BUILD/autostart/startfriendnetwork.sh"

echo "Friend Network installed successfully."
exit 0
