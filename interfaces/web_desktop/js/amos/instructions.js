//
// AMOS Pro instruction set
// All the instructions available in the language
//
AMOS.instructions = 
{
	AREXX_ANSWER: 			{ syntax: 'iN,s', javascript: '', { help: "instruction answer a message from an AREXX program", index: "10.6.04" } },
	AREXX_CLOSE: 			{ syntax: 'i', javascript: '', { help: "Instruction close a communications port", index: "5.3.04" } },
	AREXX_EXIST: 			{ syntax: 'iS', javascript: '', { help: "Function check the availability of a communications port", index: " 5.3.09" } },
	AREXX_OPEN: 		 	{ syntax: 'i', javascript: '', { help: "Instruction open an AREXX communications port", index: "5.3.02" } },set
	AREXX$:  				{ syntax: 's', javascript: '""', { help: "Function get a message from an AREXX program", index: "9.3.10" } },
	AREXX:  				{ syntax: 'v', javascript: '0', { help: "Function get a message from an AREXX program", index: "9.3.10" } },
	AREXX_WAIT: 		 	{ syntax: 'i', javascript: '', { help: "Instruction wait for a message from an AREXX program", index: "7.6.11" } },
	ARRAY:  				{ syntax: 'nN', javascript: 'AMOS.array( %0 );', { help: "Function load the address of an array into a program", index: "7.6.18" } },
	AS:						{
								{ syntax: '', javascript: '', { help: "Instruction please see RESERVE", index: "7.6.17" } },
								{ syntax: '', javascript: '', { help: "Interface Instruction return the size of an array", index: "7.6.17" } }
							},
	AMOS_TO_FRONT:			{ syntax: 'i', javascript: 'AMOS.toFront();', { help: "instruction hide AMOS Professional and reveal the desktop", index: "11.04.01" } },
	AMOS_TO_BACK:			{ syntax: 'i', javascript: 'AMOS.toBack();', { help: "instruction hide The Workbench and reveal the desktop", index: "11.04.01" } },
	AMOS_LOCK:				{ syntax: 'i', javascript: 'AMOS.lock();', { help: "instruction disable [Amiga]+[A] toggle", index: "11.04.01" } },
	AMOS_UNLOCK:			{ syntax: 'i', javascript: 'AMOS.unLock();', { help: "instruction enable [Amiga]+[A] toggle", index: "11.04.01" } },
	ASC:  					{ syntax: 'nn', javascript: 'AMOS.asc( %0 );', { help: "function give the Ascii code of a character", index: "7.6.20" } },
	ASIN:  					{ syntax: 'nn', javascript: 'Math.asin( %0 );', { help: "Function give arc sine", index: "11.4.02" } },
	ASK_EDITOR: 		 	{ syntax: 'nn', javascript: 'AMOS.asc( %0 );', { help: "Instruction return params from Editor to an accessory program", index: "11.4.01" },
	ASSIGN:  				{ syntax: 'iStS', javascript: 'AMOS.assignFont( %0, %1 );', help: "Instruction assign a name to a path or device", index: "1.4.01" } },
	AT:  					{ syntax: 'nN', javascript: 'AMOS.at( %0 );', { help: "Function return a string to position the text cursor", index: "11.4.01" } },
	ATAN:  					{ syntax: 'nN', javascript: 'Math.atan( %0 );', { help: "Function give arc tangent", index: "11.4.02" } },
	AUTO_VIEW_OFF:			{ syntax: 'i', javascript: '', { help: "Instruction toggle viewing mode off", index: " 7.6.18" } },
	AUTO_VIEW_ON:	 		{ syntax: 'i', javascript: '', { help: "Instruction toggle viewing mode on", index: "7.6.18" } },
	AUTOBACK:  				{ syntax: 'i', javascript: '', { help: "Instruction set the graphics mode on double buffered screen", index: "5.4.03" } },
	AUTOTEST_AMAL:		  	{ syntax: '0', javascript: '', { help: "Instruction activate AMAL Autotest system", index: "7.6.24" } },
	BA:  					{ syntax: '0', javascript: '', { help: "Interface Instruction set coordinate base for dialogue box", index: "7.6.25" } },
	BANK_SHRINK:  			{ syntax: 'iN', javascript: 'AMOS.bankShrink( %0 );', { help: "Instruction reduce the size of a memory bank", index: "7.6.25" } },
	BANK_SWAP:  			{ syntax: 'iN,N', javascript: 'AMOS.bankSwap( %0, %1 );', { help: "Instruction swap over two memory banks", index: "7.6.25" } },
	BANK_TO_MENU:		  	{ syntax: 'iN', javascript: 'AMOS.bankToMenu( %0 );', { help: "Instruction restore menu definition saved in menu bank", index: "7.6.03" } },
	BAR:  					{
								{ syntax: 'iN', javascript: 'AMOS.bankToMenu( %0 );', { help: "Instruction draw a filled rectangle", index: "6.3.0" } },
								{ syntax: '', javascript: '', { help: "Embedded Menu Command draw a bar", index: "6.5.15" } }
							},
	BC_AMAL:  				{ help: "Function check for Bob collision", index: "7.6.08" },
	BC:  					{ help: "Interface Instruction change the setting of any active button", index: "9.1.13" },
	BCHG:  					{ help: "Instruction toggle a bit", index: "14.A.10" },
	BCLR:  					{ help: "Instruction clear a bit", index: "14.A.11" },
	BELL:  					{ help: "Instruction generate a pure audio tone", index: "8.1.01" },
	BGRAB:  				{ help: "Instruction grab a memory bank from previous program", index: "5.9.10" },
	BIN$:  					{ help: "Function convert a decimal value to binary number", index: "14.A.02" },
	BLENGTH:  				{ help: "Function give the length of a memory bank from previous program", index: "5.9.09" },
	BLOAD:  				{ help: "Instruction load block of binary data into a bank or an address", index: "5.9.05" },
	BO:	  					{ help: "Interface Instruction draw a box from Resource Bank image components", index: "9.4.02" },
	BOB:  					{ help: "Embedded Menu Command draw a Bob", index: "6.5.14" },
	BOB:  					{ help: "Instruction display a Bob on screen", index: "7.2.01" },
	BOB_CLEAR:  			{ help: "Instruction clear all Bobs from the screen", index: "7.3.05" },
	BOB_COL:  				{ help: "Function test for collision between Bobs", index: "7.4.03" },
	BOB_DRAW:  				{ help: "Instruction re-draw all Bobs on screen", index: "7.3.05" },
	BOB_OFF:  				{ help: "Instruction remove a Bob from display", index: "7.2.03" },
	BOB_UPDATE:  			{ help: "Instruction move several Bobs simultaneously", index: "7.3.03" },
	BOB_UPDATE_OFF: 		{ help: "Instruction turn off automatic Bob update system", index: "7.3.03" },
	BOB_UPDATE_ON: 			{ help: "Instruction turn on automatic Bob update system", index: "7.3.03" },
	BOBSPRITE_COL		 	{ help: "Function test for collision between Bob and Sprites", index: "7.4.04" },
	BOOM:  					{ help: "Instruction generate explosive sound effect", index: "8.1.01" },
	BORDER:  				{ help: "Instruction change window border", index: "5.7.02" },
	BORDER$:  				{ help: "Function create a border around text", index: "5.6.11" },
	BOX:  					{ help: "Instruction draw a rectangular outline", index: "6.4.03" },
	BP:  					{ help: "Interface Function return the setting inside a button definition", index: "9.1.12" },
	BQ:  					{ help: "Interface Instruction trigger an exit button", index: "9.1.11" },
	BR:  					{ help: "Interface Instruction change the setting of a button", index: "9.1.13" },
	BREAK_OFF:  			{ syntax: 'i', javascript: 'AMOS.breakOff();', { help: "Instruction toggle off program break keys", index: "5.1.08" } },
	BREAK_ON:  				{ syntax: 'i', javascript: 'AMOS.breakOn();', { help: "Instruction toggle on program break keys", index: "5.1.08" } },
	BSAVE:  				{ help: "Instruction save unformatted memory bank", index: "5.9.05" },
	BSEND:  				{ help: "Instruction send a memory bank to previous program", index: "5.9.10" },
	BSET:  					{ help: "Instruction set a bit to 1", index: "14.A.10" },
	BSTART:  				{ help: "Function give address of a memory bank from a previous program", index: "5.9.10" },
	BTST:  					{ help: "Function test a bit", index: "14.A.10" },
	BU:  					{ help: "Interface Instruction define an Interface button", index: "9.1.09" },
	BX:  					{ help: "Interface Function get the x-coordinate base location", index: "9.2.01" },
	BY:  					{ help: "Interface Function get the y-coordinate base location", index: "9.2.01" },
	C_AMAL:  				{ help: "Function give collision status of an Object", index: "7.6.09" },
	CALL:  					{ help: "Instruction execute a machine code program", index: "14.A.14" },
	CALL_EDITOR:		 	{ help: "Instruction send instructions to Editor from an accessory program", index: "13.1.01" },
	CALL:	  				{ help: "Interface Instruction call a machine code extension", index: "9.2.10" },
	CDOWN:  				{ help: "Instruction move the text cursor down", index: "5.6.08" },
	CDOWN$:  				{ help: "Function return control character to move text cursor down", index: "5.6.08" },
	CENTRE:  				{ help: "Instruction print text at centre of current line", index: "5.6.07" },
	CHANAN:  				{ help: "Function test a channel for an active animation", index: "7.6.19" },
	CHANGE_MOUSE:  			{ help: "Instruction change the shape of the mouse pointer", index: "5.8.03" },
	CHANMV:  				{ help: "Function test channel for an active Object", index: "7.6.19" },
	CHANNEL:  				{ help: "Instruction assign an Object to an AMAL channel", index: "7.6.12" },
	CHIP_FREE:  			{ help: "Function give remaining Chip memory", index: "3.1.05" },
	CHOICE:  				{ help: "Function read a menu", index: "6.5.02" },
	CHR$:  					{ help: "Function give a character with a given Ascii code", index: "5.2.05" },
	CIRCLE:  				{ help: "Instruction draw a circular outline", index: "6.4.03" },
	CLEAR_KEY			 	{ help: "Instruction re-set the keyboard buffer", index: "10.1.03" },
	CLEFT:  				{ help: "Instruction move text cursor one character to the left", index: "5.6.08" },
	CLEFT$:  				{ help: "Function move cursor 1 character to the left", index: "5.6.09" },
	CLINE:  				{ help: "Instruction clear text on the current cursor line", index: "5.6.09" },
	CLIP:  					{ help: "Instruction restrict drawing to a limited screen area", index: "6.4.04" },
	CLOSE:  				{ help: "Instruction close a file", index: "10.2.12" },
	CLOSE_EDITOR:  			{ help: "Instruction close the AMOS Professional editor", index: "13.1.07" },
	CLOSE_WORKBENCH:		{ help: "Instruction close the Workbench", index: "13.1.07" },
	CLS:	  				{ help: "Instruction clear the current screen", index: "6.1.07" },
	CLW: :  				{ help: "Instruction clear the current window", index: "5.7.04" },
	CMOVE:  				{ help: "Instruction move the text cursor", index: "5.6.06" },
	CMOVE$:  				{ help: "Function return control string to position text cursor", index: "5.6.06" },
	COL:  					{ help: "Function test status of Object after collision detect routine", index: "7.4.04" },
	COLOUR:  				{ help: "Function read the colour assignment", index: "6.4.05" },
	COLOUR:  				{ help: "Instruction assign colour to an index", index: "6.4.06" },
	COLOUR_BACK:		 	{ help: "Instruction assign colour to screen background", index: "6.4.06" },
	COMMAND_LINE$			{ help: "Reserved Variable transfer parameters between programs", index: "10.2.09" },
	COP_LOGIC:  			{ help: "Function give address of logical copper list", index: "14.F.04" },
	COP_MOVE:  				{ help: "Instruction write a Move instruction to the copper list", index: "14.F.03" },
	COP_MOVEL:  			{ help: "Instruction write lone Move instruction to the copper list",index:  "14.F.03" },
	COP_RESET:  			{ help: "Instruction re-set copper list pointer", index: "14.F.04" },
	COP_SWAP:  				{ help: "Instruction swap over the logical and physical copper lists", index: "14.F.04" },
	COP_WAIT:  			  	{ help: "Instruction insert a Wait instruction into copper list", index: "14.F.03" },
	COPPER_OFF: 		 	{ help: "Instruction turn off standard copper list", index: "14.F.01" },
	COPPER_ON:  			{ help: "Instruction re-start automatic copper generation", index: "14.F.03" },
	COPY:  					{ help: "Instruction copy a memory block", index: "14.A.05" },
	COS:  					{ help: "Function give cosine of an angle", index: "5.3.08" },
	CRIGHT:  				{ help: "Instruction move the text cursor one character to the right", index: "5.6.08" },
	CRIGHT$:  				{ help: "Function move cursor one character right", index: "5.6.09" },
	CUP:  					{ help: "Instruction move the text cursor up one line", index: "5.6.08" },
	CUP$:  					{ help: "Function return control character to move cursor up one", index: "line 5.6.09" },
	CURS_OFF:  				{ help: "Instruction toggle the text cursor off", index: "5.6.11" },
	CURS_ON:  				{ help: "Instruction toggle the text cursor on", index: "5.6.11" },
	CURS_PEN:  				{ help: "Instruction select colour of the text cursor", index: "5.6.10" },
	CX:  					{ help: "Interface Function centre text in the display", index: "9.2.05" },
	DATA:  					{ help: "Structure place a list of data items in a program", index: "5.4.12" },
	DEC:  					{ help: "Instruction decrement an integer variable by one unit", index: "5.3.02" },
	DEEK:  					{ help: "Function read two bytes from an even address", index: "14.A.04" },
	DEF_FN:  				{ syntax: 'i(doDefFn)', javascript: '', { { help: "Structure create a user-defined function", index: "5.1.06" } },
	DEF_SCROLL:  			{ help: "Instruction define a scrolling screen zone", index: "6.2.02" },
	DEFAULT:  				{ help: "Instruction re-set to the default screen", index: "6.1.03" },
	DEFAULT_PALETTE:		{ help: "Instruction define standard palette", index: "6.1.09" },
	DEGREE:  				{ help: "Instruction use degrees", index: "5.3.08" },
	DEL_BLOCK:  			{ help: "Instruction delete a screen block", index: "7.7.04" },
	DEL_BOB:  				{ help: "Instruction delete an image from the Object bank", index: "7.2.09" },
	DEL_CBLOCK:  			{ help: "Instruction delete compacted screen block", index: "7.7.05" },
	DEL_ICON:  				{ help: "Instruction delete image from the Icon bank", index: "7.7.02" },
	DEL_SPRITE:  			{ help: "Instruction delete an image from the Object bank", index: "7.1.05" },
	DEL_WAVE:  				{ help: "Instruction delete an audio wave", index: "8.1.07" },
	DEV_ABORT:  			{ help: "Instruction abort an IO operation", index: "11.5.08" },
	DEV_BASE:  				{ help: "Function get base address of an IO structure", index: "11.5.08" },
	DEV_CHECK:  			{ help: "Function check status of a device with CheckIO", index: "11.5.08" },
	DEV:  					{ help: "Instruction close one or more devices", index: "11.5.07" },
	DEV:  					{ help: "Instruction call a command using DoIO", index: "11.5.08" },
	DEV_FIRST$:  			{ help: "Function get the first device from the current device list", index: " 11.5.06" },
	DEV_NEXT$:  			{ help: "Function get the next device in the current search path", index: "11.5.07" },
	DEV_OPEN:  				{ help: "Instruction open a device", index: "11.5.07" },
	DEV_SEND:  				{ help: "Instruction call a command using SendIO", index: "11.5.08" },
	DFREE:  				{ help: "Function report amount of free space on disc", index: "10.2.10" },
	DI:  					{ help: "Interface Instruction create a numeric editing zone", index: "9.3.07" },
	DIALOG:  				{ help: "Function return the status of an open dialogue box", index: "9.3.0" },
	DIALOG_BOX:  			{ help: "Function display dialogue box on the screen", index: "9.1.06" },
	DIALOG_CLOSE:  			{ help: "Instruction close one or more dialogue channels", index: "9.3.02" },
	DIALOG_CLR:  			{ help: "Instruction clear a dialogue box", index: "9.3.15" },
	DIALOG_FREEZE:  		{ help: "Instruction stop dialogue channel input", index: "9.3.15" },
	DIALOG_OPEN:  			{ help: "Instruction open a channel to an Interface program", index: "9.3.01" },
	DIALOG_RUN:  			{ help: "Function run a dialogue box from an open channel", index: "9.3.02" },
	DIALOG_UNFREEZE:		{ help: "Instruction re-activate a frozen dialogue channel", index: "9.3.15" },
	DIALOG_UPDATE:  		{ help: "Instruction update a dialogue zone", index: "9.3.14" },
	DIM:  					{ syntax: 'i(doDim)', javascript: '', { { help: "Instruction dimension an array", index: "5.1.04" } },
	DIR:  					{ help: "Instruction print directory of the current disc", index: "10.2.02" },
	DIR_FIRST$:  			{ help: "Function get the first file that satisfies a path name", index: "10.2.07" },
	DIR_NEXT$:  			{ help: "Function get the next file that satisfies path name", index: "10.2.07" },
	DIR$:  					{ help: "Reserved Variable change the current directory", index: "10.2.05" },
	DIR_W:  				{ help: "Instruction print directory in two columns", index: "10.2.02" },
	DIRECT:  				{
								{ syntax: 'i', javascript: 'AMOS.direct();', { help: "Instruction return to Direct Mode", index: "5.1.08" } },
								{ syntax: '', javascript: '', { help: "AMAL Instruction change resumption point of main program", index: "7.6.06" } }
							},
	DISC INFO$:  			{ help: "Function report free space of named file or directory", index: "10.2.10" },
	DISPLAY_HEIGHT: 		{ help: "Function give the maximum available screen height", index: "14.C.01" },
	DO:  					{ help: "Structure mark the beginning of a loop", index: "5.4.06" },
	DOKE:  					{ help: "Instruction change two-byte word at an even address", index: "14.A.04" },
	DOSCALL:  				{ syntax: 'nN', javascript: '0', help: "Function execute function from the DOS library", index: "11.5.02" } ],
	DOUBLE_BUFFER:  		{ help: "Instruction activate the double buffering system", index: "7.2.06" },
	DRAW:  					{ help: "Instruction draw a line", index: "6.4.02" },
	DRAW_TO:  				{ help: "Instruction draw a line from the last coordinates", index: "6.4.02" },
	DREG:  					{ help: "Reserved Variable pass a value into 68000 data register", index: "14.A.15" },
	DUAL_PLAYFIELD: 		{ help: "Instruction combine two screens", index: "6.1.06" },
	DUAL_PRIORITY:  		{ help: "Instruction reverse the order of dual playfield screens", index: "6.1.07" },
	ED:  					{ help: "Interface Instruction create a text edit zone", index: " 9.3.05" },
	DIALOG:  				{ help: "Function find an error in an Interface program", index: " 9.3.03" },
	EDIT:  					{ syntax: 'i', javascript: 'AMOS.edit();', { help: "Instruction return to the Edit Screen", index: "5.1.08" } },
	ELLIPSE:  				{ help: "Instruction draw an elliptical outline", index: "6.4.04" },
	ELLIPSE:  				{ help: "Embedded Menu Command draw an ellipse", index: "6.5.16" },
	ELSE:  					{ help: "Structure qualify a condition", index: " 5.4.04" },
	ELSE_IF:  				{ help: "Structure qualify a condition", index: "5.4.05" },
	END:  					{ syntax: 'i', javascript: 'AMOS.end();' { help: "Instruction stop the current program", index: "5.1.07" } },
	END_AMAL:  				{ help: "Instruction terminate an AMAL program", index: "7.6.06" },
	END_IF:  				{ help: "Structure terminate a structured test", index: "5.4.04" },
	END_PROC:  				{ help: "Structure end a procedure", index: "5.5.01" },
	EOF:  					{ help: "Function test for end of file", index: "10.2.13" },
	EQU:  					{ syntax: 'nS', javascript: '0', help: "Function get an equate used by Amiga system library", index: "11.5.04" } ],
	ERASE:  				{ help: "Instruction clear a single memory bank", index: "5.9.06" },
	ERASE_ALL:  			{ help: "Instruction clear all current memory banks", index: "5.9.06" },
	ERASE_TEMP:  			{ help: "Instruction clear temporary memory banks", index: "5.9.07" },
	ERRN:  					{ help: "Function give error code number of error", index: "12.2.03" },
	ERROR:  				{ help: "Instruction generate an error", index: "12.2.03" },
	ERR$:  					{ help: "Function return an error message string", index: "12.2.04" },
	ERRTRAPERROR:  			{ help: "Function retam an error code number after a Trap command", index: "12.2.04" },
	EVERYERROR:  			{ help: "Instruction call a sub-routine or a procedure at regular intervals", index: "5.4.11" },
	EVERY_OFFERROR: 		{ help: "Instruction toggle regular calls off", index: "5.4.12" },
	EVERY_ONERROR		 	{ help: "Instruction toggle regular calls on", index: "5.4.12" },
	EX:  					{ help: "Interface Instruction exit from Interface and return to main program", index: "9.1.03" },
	EXEC:	  				[ syntax: 'iS,S', javascript: 'AMOS.exec( 1, 2 )',{ help: "Instruction send a CLI command to a device", index: "11.4.04" } ],
	EXECALL:  				{ syntax: 'fN', javascript: '0',help: "Function call EXEC library", index: "11.5.02" } ],
	EXIST:  				{ help: "Function check if specified file exists", index: "10.2.06" },
	EXIT:  					{ help: "Structure break out of a loop", index: "7.6.16" },
	EXIT_AMAL:  			{ help: "Instruction leave Autotest and return to main program", index: "7.6.06" },
	EXIT_IF:  				{ help: "Structure break out of a loop depending on a test", index: "5.4.07" },
	EXP:  					{ help: "Function calculate an exponential number", index: "5.3.06" },
	FADE:  					{ help: "Instruction blend colours to new values", index: "6.3.01" },
	FALSE:  				{ help: "Function hold a value of zero if a condition is false", index: "5.4.06" },
	FAST_FREE:  			{ help: "Function return amount of Fast memory in bytes", index: "3.1.05" },
	FIELD:  				{ help: "Instruction define a record structure", index: "10.2.14" },
	FILL:  					{ help: "Instruction fill memory block with the contents of a variable", index: " 14.A.05" },
	FIRE:  					{ help: "Function test the status of joystick fire-button", index: "5.8.02" },
	FIX:  					{ help: "Instruction fix the precision of floating point", index: "5.3.05" },
	FLASH:  				{ help: "Instruction set flashing colour sequence", index: "6.3.03" },
	FLASH_OFF:  			{ help: "Instruction turn off the flashing colour sequence", index: "6.3.03" },
	FLIP$:  				{ help: "Function invert a string", index: "5.2.04" },
	FN:  					{ syntax: 'n(doFn)', javascript: '', { { help: "Structure call a user-defined function", index: "5.1.06" } },
	FONT$:  				[ syntax: 's', javascript: 'AMOS.getFonts()', help: "Function return details of available fonts", index: "11.1.02" } ],
	FOR:  					{ help: "Structure mark the beginning of a loop", index: "5.4.09" },
	For:  					{ help: "AMAL Structure mark begining of a loop", index: "7.6.05" },
	FRAME_LENGTH:  			{ help: "Function give frame length in bytes", index: "7.5.04" },
	FRAME_LOAD:  			{ help: "Function load frames into memory", index: "7.5.04" },
	FRAME_PARAM:  			{ help: "Function give parameter after playing a frame", index: " 7.5.06" },
	FRAME_PLAY:  			{ help: "Function play frames on screen", index: "7.5.05" },
	FRAME_SKIP:  			{ help: "Function skip past an animation frame", index: "7.5.06" },
	FREE:  					{ syntax: 'n', javascript: '( 1024 * 1024 )', { help: "Function give free memory available in variable area", index: "5.1.05" },
	FREEZE:  				{ help: "Instruction freeze the display", index: "7.5.07" },
	FSEL$:  				{ help: "Function select a file", index: "10.2.07" },
	GB:  					{ help: "Interface Instruction draw a graphic filled box", index: "9.2.02" },
	GE:  					{ help: "Interface Instruction draw an ellipse or circle", index: "9.2.04" },
	GET:  					{ help: "Instruction read a record from random access file", index: "10.2.15" },
	GET_BLOCK:  			{ help: "Instruction grab a screen block into memory", index: "7.7.03" },
	GET_BOB:  				{ help: "Instruction grab an image from part of the screen", index: "7.2.07" },
	GET_BOB_PALETTE:		{ help: "Instruction load image colours to current screen", index: "7.2.04" },
	GET_CBLOCK:  			{ help: "Instruction save and compact a screen block", index: "7.7.04" },
	GET_DISC_FONTS: 		[ syntax: 'i', javascript: 'AMOS.readFontsList()', help: "Instruction create a list of available fonts from current disc", index: "11.1.02" } ],
	GET_FONTS:  			[ syntax: 'i', javascript: 'AMOS.readFontsList()', help: "Instruction create a list of available fonts from Rom and disc", index: "11.1.01" } ],
	GET_ICON:  				{ help: "Instruction create an icon", index: "7.7.01" },
	GET_ICON_PALETTE:		{ help: "Instruction load icon colours into current screen", index: "7.7.01" },
	GET_PALETTE:  			{ help: "Instruction copy palette from a screen", index: "6.1.10" },
	GET_ROM_FONTS:  		[ syntax: 'i', javascript: 'AMOS.readFontsList()', help: "Instruction create a list of available ROM fonts", index: "11.1.02" },
	GET_SPRITE:  			{ help: "Instruction grab screen image into Object bank", index: "7.1.07" },
	GET_SPRITE_PALETTE: 	{ help: "Instruction grab Sprite colours into current screen", index: "7.1.07" },
	GFXCALL:  				{ syntax: 'fN', javascript: '0',help: "Function call Graphics library", index: "11.5.03" } ],
	GL:  					{ help: "Interface Instruction draw a line on screen", index: "9.2.04" },
	GLOBAL:  				{ help: "Structure declare list of global variables", index: "5.5.06" },
	GOSUB:  				{ help: "Structure jump to a sub-routine", index: "5.4.02" },
	GOTO:  					{ help: "Structure jump to defined position in a program", index: "5.4.01" },
	GR_LOCATE:  			{ help: "Instruction position the graphics cursor", index: "6.4.01" },
	GR_WRITING:  			{ help: "Instruction set the graphic writing mode", index: "6.4.10" },
	GS:  					{ help: "Interface Instruction draw a graphic hollow rectangle", index: "9.2.03" },
	HARDCOL:  				{ help: "Function return collision status after a Set Hardcol instruction", index: "7.4.05" },
	HCOS:  					{ help: "Function give hyperbolic cosine", index: "5.3.10" },
	HEX$:  					{ help: "Function convert decimal value to hexadecimal number", index: "14.A.02" },
	HIDE:  					{ help: "Instruction remove the mouse pointer from the screen", index: "5.8.03" },
	HIDE_ON:  				{ help: "Instruction keep mouse pointer hidden from the screen", index: "5.8.03" },
	HIRES:  				{ help: "Function set screen mode to 640 pixels wide", index: "6.1.02" },
	HOME:  					{ help: "Instruction force the text cursor home", index: "5.6.06" },
	HOT_SPOT:  				{ help: "Instruction set reference point for all coordinate calculations", index: "7.1.11" },
	HREV:  					{ help: "Function flip an image horizontally", index: "7.2.10" },
	HREV_BLOCK:  			{ help: "Instruction flip a block horizontally", index: "7.7.04" },
	HS:  					{ help: "Interface Instruction create an animated horizontal slider bar", index: "9.3.07" },
	HSCROLL:  				{ help: "Instruction scroll text horizontally", index: "5.6.12" },
	HSIN:  					{ help: "Function give hyperbolic sine", index: "5.3.09" },
	HSLIDER:  				{ help: "Instruction draw a horizontal slider bar", index: "5.7.05" },
	HT:  					{ help: "Interface Instruction open an interactive text window", index: "9.3.15" },
	HTAN:  					{ help: "Function give hyperbolic tangent", index: "5.3.10" },
	HUNT:  					{ help: "Function find a string of characters in memory", index: "14.A.06" },
	HZONE:  				{ help: "Function give screen zone under hardware coordinates", index: "7.4.07" },
	I_BOB:  				{ help: "Function get image number used by a Bob", index: "7.2.04" },
	I_SPRITE:  				{ help: "Function get image number used by a Sprite", index: "7.1.09" },
	ICon:  					{ help: "Embedded Menu Command draw an icon", index: "6.5.14" },
	ICON_BASE:  			{ help: "Function get icon base", index: "5.9.11" },
	IF:  					{ help: "Structure choose between alternative statements", index: "5.4.03" },
	IF:  					{ help: "Interface Structure mark the start of a conditional tes", index: "9.2.07" },
	If:  					{ help: "AMAL Structure perform a test", index: "7.6.05" },
	IFF_ANIM:  				{ help: "Instruction play an animation file", index: "7.5.03" },
	IL:  					{ help: "Interface Instruction display an inactive list window", index: "9.3.11" },
	IN:  					{ help: "Interface Instruction set the current drawing colour", index: "9.2.03" },
	INC:  					{ help: "Instruction increment an integer variable by one unit", index: "5.3.02" },
	INCLUDE:  				{ help: "Instruction specify a file for inclusion when testing a program", index: "10.2.16" },
	Ink:  					{ help: "Embedded Menu Command set colour", index: "6.5.14" },
	INK:  					{ help: "Instruction set drawing colour", index: "6.4.05" },
	INKEY$:  				{ help: "Function check for a key press", index: "0.1.01" },
	INPUT:  				{ help: "Instruction load a value into a variable", index: "10.1.04" },
	INPUT$:  				{ help: "Function anticipate characters to be input into a string", index: "10.1.04" },	
	INPUT#:  				{ help: "Structure input variables from a file or device", index: "10.2.12" },
	INS_BOB:  				{ help: "Instruction insert blank Bob image into Object bank", index: "7.2.10" },
	INS_ICON:  				{ help: "Instruction insert a blank icon image into the Icon bank", index: "7.7.02" },
	INS_SPRITE:  			{ help: "Instruction insert a blank Sprite image into the Object bank", index: "7.1.05" },
	INSTR:  				{ help: "Function search for one string inside another string", index: "5.2.02" },
	INT:  					{ help: "Function convert a floating point number into an integer", index: "5.3.04" },
	INTCALL:  				{ syntax: 'nN', javascript: '0', help: "Function call Intuition library", index: "11.5.03" } ],
	INVERSE_OFF:  			{ help: "Instruction toggle inverse text off", index: "5.6.03" },
	INVERSE_ON:  			{ help: "Instruction toggle inverse text on", index: "5.6.03" },
	J0:  					{ help: "AMAL Function give status of right joystick", index: "7.6.09" },
	J1:  					{ help: "AMAL Function give status of left joystick", index: "7.6.09" },
	JDOWN:  				{ help: "Function test joystick for downward movement", index: "5.8.02" },
	JLEFT:  				{ help: "Function test joystick for left movement", index: "5.8.01" },
	JOY:  					{ help: "Function read status of the joystick", index: "5.8.01" },
	JRIGHT:  				{ help: "Function test joystick for right movement", index: "5.8.02" },
	JS:  					{ help: "Interface Instruction call an Interface sub-routine", index: "9.2.07" },
	JP:  					{ help: "Interface Instruction jump to an Interface program label", index: "9.2.06" },
	Jump:  					{ help: "AMAL Instruction jump to a label", index: "7.6.03" },
	JUP:  					{ help: "Function test joystick for upward movement", index: "5.8.02" },
	K1:  					{ help: "AMAL Function give status of left mouse key", index: "7.6.09" },
	K2:  					{ help: "AMAL Function give status of right mouse key", index: "7.6.09" },
	KEY_SHIFT:  			{ help: "Function test status of shift keys", index: "10.1.03" },
	KEY_SPEED:  			{ help: "Instruction set key repeat speed", index: "10.1.06" },
	KEY_STATE:  			{ help: "Function test for a specific key state", index: "10.1.02" },
	KEY$:  					{ help: "Reserved Variable define a keyboard macro", index: "10.1.06" },
	KILL:  					{ help: "Instruction erase a file from the current disc", index: "10.2.10" },
	KILL_EDITOR:  			{ help: "Instruction remove the AMOS Professional Editor from memory", index: "14.B.01" },
	KY:  					{ help: "Interface Instruction set a keyboard short-cut", index: "9.1.14" },
	LA:  					{ help: "Interface Instruction create a simple label", index: "9.2.06" },
	LACED:  				{ help: " Function give value linked to screen resolution", index: "6.1.13" },
	LDIR:  					{ help: "Instruction output directory of the current disc to a printer", index: "10.2.04" },
	LDIR:  					{ help: "/W Instruction output directory of disc in 2 columns to printe", index: "10.2.04" },
	LED_OFF:  				{ help: "Instruction toggle audio filter off", index: "8.1.08" },
	LED_ON:  				{ help: "Instruction toggle audio filter on", index: "8.1.08" },
	LEEK:  					{ help: "Function read four bytes from an even address", index: "14.A.04" },
	LEFT$:  				{ help: "Function give the leftmost characters of a string", index: "5.2.01" },
	LEN:  					{ help: "Function give the length of a string", index: "5.2.05" },
	LENGTH:  				{ help: "Function give the length of a memory bank", index: "5.9.08" },
	Let:  					{ help: "AMAL Instruction assign a value to a register", index: "7.6.04" },
	LIB_BASE:  				{ syntax: 'nN', javascript: '0', help: "System Function get the base address of system library", index: "11.5.02" } ],
	LIB_CALL:  				{ syntax: 'nN,N', javascript: '0', help: "System Function call a function from a system library", index: "11.5.01" } ],
	LIB_CLOSE:  			{ syntax: 'in', javascript: '', help: "System Function close one or all currently open system libraries", index: "11.5.01" } ],
	LIB_OPEN:  				[ syntax: 'i', javascript: '', help: "Instruction open a system library for use", index: "11.5.01" } ],
	LIMIT_BOB:  			{ help: "Instruction limit Bob to part of the screen", index: "7.2.06" },
	LIMIT_MOUSE:  			{ help: "Instruction limit the mouse pointer to part of the screen", index: " 5.8.06" },
	LIne:  					{ help: "Interface Instruction draw a line of Resource Bank image components", index: "9.4.02" },		
	LIne:  					{ help: "Embedded Menu Command draw a line", index: "6.5.15" },
	LINE_INPUT:  			{ help: "Instruction input a list of variables separated by [Return]", index: "10.1.05" },
	LINE_INPUT#:  			{ help: "Structure input list of variables not separated by a comma", index: "10.2.12" },
	LIST_BANK:  			{ help: "Instruction list all current banks in memory", index: "5.9.08" },
	LN:  					{ help: "Function give natural logarithm", index: "5.3.06" },
	LOAD_IFF:  				{ help: "Instruction load an IFF screen from disc", index: "6.1.11" },
	LOAD:  					{ help: "Instruction load one or more banks into memory", index: "5.9.04" },
	LOcate:  				{ help: "Embedded Menu Command move graphics cursor", index: "6.5.13" },
	LOCATE:  				{ help: "Instruction position the text cursor", index: "5.6.05" },
	LOF:  					{ help: "Function give the length of an open file", index: "10.2.13" },
	LOG:  					{ help: "Function give logarithm", index: "5.3.06" },
	LOGBASE:  				{ help: "Function give the address of logical screen bit-plane", index: "6.2.04" },
	LOGIC:  				{ help: "Function give number of the logical screen", index: "6.2.04" },
	LOKE:  					{ help: "Instruction change a four-byte word at an even address", index: "14.A.04" },
	LOOP:  					{ help: "Structure mark the end of a loop", index: "5.4.06" },
	LOWER$:  				{ help: "Function convert a string of text to lower case", index: "5.2.03" },
	LOWRES:  				{ help: "Function set screen resolution to 320 pixels wide", index: "6.1.02" },
	LPRINT:  				{ help: "Instruction output a list of variables to a printer", index: " 5.6.14" },
	LVO:  					{ syntax: 'nS', javascript: '0', help: "Function get the Library Vector Offset", index: "11.5.04" } ],
	MAKE_ICON_MASK:  		{ help: "Instruction set colour zero to transparent", index: "7.7.03" },
	MAKE_MASK:  			{ help: "Instruction mask an image for collision detection", index: "7.4.02" },
	MASK_IFF:  				{ help: "Instruction mask IFF picture data", index: "7.5.07" },
	MATCH:  				{ help: "Function search an array for a value", index: "5.2.06" },
	MAX:  					{ help: "Function give the maximum of two values", index: "5.3.03" },
	ME:  					{ help: "Interface Function return a message from the Resource Bank", index: "9.4.01" },
	MED_CONT:  				{ help: "Instruction continue a Med module", index: "8.3.04" },
	MED_LOAD:  				{ help: "Instruction load a Med music module", index: "8.3.03" },
	MED_MIDI_ON:  			{ help: "Instruction access MIDI instructions in a Med module", index: "8.3.04" },
	MED_PLAY:  				{ help: "Instruction play a Med module", index: "8.3.04" },
	MED_STOP:  				{ help: "Instruction stop the current Med module", index: "8.3.04" },
	MEMORIZE_X:  			{ help: "Instruction save the x-coordinate of the text cursor", index: "5.6.09" },
	MEMORIZE_Y:  			{ help: "Instruction save the y-coordinate of the text cursor", index: "5.6.09" },
	MENU_ACTIVE:  			{ help: "Instruction activate a menu item", index: "6.5.08" },
	MENU_BAR:  				{ help: "Instruction display menu items as a vertical bar", index: "6.5.07" },
	MENU_BASE:  			{ help: "Instruction move the starting position of a men", index: "6.5.11" },
	MENU_CALC:  			{ help: "Instruction recalculate a menu", index: "6.5.06" },
	MENU_CALLED:  			{ help: "Instruction re-draw a menu item continually", index: " 6.5.17" },
	MENU_DEL:  				{ help: "Instruction delete one or more menu items", index: "6.5.06" },
	MENU_INACTIVE:  		{ help: "Instruction turn off a menu item", index: "6.5.08" },
	MENU_ITEM_MOVABLE:  	{ help: "Instruction move individual menu items", index: "6.5.09" },
	MENU_ITEM_STATIC:  		{ help: "Instruction fix menu items in a static position", index: "6.5.09" },
	MENU_KEY:  				{ help: "Instruction assign a key to a menu item", index: "6.5.12" },
	MENU_LINE:  			{ help: "Instruction display menu options in a horizontal line", index: " 6.5.07" },
	MENU_LINK:  			{ help: "Instruction link a list of menu items", index: "6.5.10" },
	MENU_MOUSE_OFF:  		{ help: "Instruction toggle off menu under the mouse pointer", index: "6.5.11" },
	MENU_MOUSE_ON:  		{ help: "Instruction toggle on menu under the mouse pointer", index: "6.5.11" },	
	MENU_MOVABLE:  			{ help: "Instruction activate automatic menu movement", index: "6.5.09" },
	MENU_OFF:  				{ help: "Instruction de-activate a menu", index: " 6.5.05" },
	MENU_ON:  				{ help: "Instruction activate a menu", index: "6.5.05" },
	MENU_ONCE:  			{ help: "Instruction turn off automatic menu re-drawing", index: "6.5.18" },
	MENU_SEPARATE:  		{ help: "Instruction separate a list of menu items", index: "6.5.10" },
	MENU_STATIC:  			{ help: "Instruction fix menu in a static position", index: "6.5.09" },
	MENU_TLINE:  			{ help: "Instruction display menu as a total line", index: "6.5.07" },
	MENU_TO_BANK:  			{ help: "Instruction save menu definitions to memory bank", index: "6.5.06" },
	MENU$:  				{ help: "Reserved Variable define a menu title or an option", index: "6.5.01" },
	MID$:  					{ help: "Function give characters from the middle of a string", index: "5.2.02" },
	MIN:  					{ help: "Function give the minimum of two values", index: "5.3.03" },
	MKDIR:  				{ help: "Instruction create a folder", index: "10.2.08" },
	MONITOR:  				{ help: "Instruction call the AMOS Professional Monitor", index: "12.1.01" },
	MOUSE_CLICK:  			{ help: "Function check for mouse button click", index: "5.8.05" },
	MOUSE_KEY:  			{ help: "Function read the status of mouse buttons", index: "5.8.05" },
	MOUSE_SCREEN:  			{ help: "Function check which screen the mouse pointer is in", index: "5.8.06" },
	MOUSE_ZONE:  			{ help: "Function check if mouse pointer is in a zone", index: "7.4.07" },
	MOUTH_HEIGHT:  			{ syntax: 'n', javascript: 'AMOS.getMouthWidth( )', help: "Function give height of the narrator mouth", index: "11.2.03" } ],
	MOUTH_READ:  			{ syntax: 'n', javascript: 'AMOS.mouthRead( )', help: "Function read position of the narrator voice", index: "11.2.03" } ],
	MOUTH_WIDTH:  			[ syntax: 'n', javascript: 'AMOS.getMouthWidth( )', help: "Function give width of the narrator mouth", index: "11.2.03" } ],
	MOVE_FREEZE:  			{ help: "Instruction suspend Object movement", index: "7.6.24" },
	MOVE_OFF:  				{ help: "Instruction toggle movements off", index: "7.6.23" },
	MOVE_ON:  				{ help: "Instruction toggle movements on", index: "7.6.23" },
	MOVE_X:  				{ help: "Instruction move an Object horizontally", index: "7.6.22" },
	MOVE_Y:  				{ help: "Instruction move an Object vertically", index: "7.6.23" },
	Move:  					{ help: "AMAL Instruction move an Object", index: "7.6.02" },
	MOVON:  				{ help: "Function give movement status", index: "7.6.23" },
	MULTI_WAIT:  			{ syntax: 'i', javascript: 'AMOS.multiWait( )', help: "WAIT Instruction force a multi-task Wait Vbl", index: "11.4.01" },
	MUSIC:  				{ help: "Instruction play a piece of AMOS Professional music", index: "8.3.01" },
	MUSIC_OFF:  			{ help: "Instruction turn off all music", index: "8.3.01" },
	MUSIC_STOP:  			{ help: "Instruction stop a single passage of music", index: "8.3.01" },
	MVOLUME:  				{ help: "Instruction set the volume of a piece of music", index: "8.3.01" },
	NEXT:  					{ help: "Structure match a For in a loop", index: "5.4.09" },
	Next:  					{ help: "AMAL Structure counter for a loop", index: "7.6.05" },
	NO_ICON_MASK:  			{ help: "Instruction remove colour zero from Icon", index: "7.7.03" },
	NO_MASK:  				{ help: "Instruction remove colour zero mask from a Bob", index: "7.2.04" },
	NOISE_TO:  				{ help: "Instruction assign a noise wave to a sound channel", index: "8.1.07" },
	NOT:  					{ help: "Structure logical NOT operation", index: "5.4.06" },
	NTSC:  					{ help: "Function identify an NTSC or PAL machine", index: "14.C.03" },
	NW:  					{ help: "Interface Instruction specify a quick-release button", index: " 9.1.14" },
	ON:  					{ help: "Structure jump on recognising a variable", index: "5.4.10" },
	On:  					{ help: "AMAL Instruction activate main program after Wait", index: "7.6.06" },
	ON_BREAK_PROC:  		{ help: "Structure jump to a procedure when break in program", index: "5.5.04" },
	ON_ERROR:  				{ help: "Structure trap an error within a program", index: "12.2.01" },
	ON_ERROR_PROC:  		{ help: "Structure trap an error using a procedure", index: "12.2.02" },
	ON_MENU_DEL:  			{ help: "Instruction delete labels and procedures used by On Menu", index: "6.5.05" },
	ON_MENU_GOSUB:  		{ help: "Instruction automatic menu selection", index: "6.5.04" },
	ON_MENU_GOTO:  			{ help: "Instruction automatic menu selection", index: "6.5.05" },
	ON_MENU_PROC:  			{ help: "Instruction automatic menu selection", index: "6.5.04" },
	ON_MENU_OFF:  			{ help: "Instruction toggle automatic menu selection off", index: "6.5.05" },
	ON_MENU_ON:  			{ help: "Instruction toggle automatic menu selection on", index: "6.5.05" },
	ON_PROC:  				{ help: "Structure trigger a jump to a procedure", index: "5.5.03" },
	OPEN_IN:  				{ help: "Instruction open a file for input", index: "10.2.11" },
	OPEN_OUT:  				{ help: "Instruction open a file for output", index: "10.2.11" },
	OPEN_PORT:  			{ help: "Instruction open a channel to an IO port", index: "10.3.06" },
	OPEN_RANDOM:  			{ help: "Instruction open a channel to a random access file", index: "10.2.14" },
	OR:  					{ help: "Structure qualify a condition", index: "5.4.03" },
	OUtline:  				{ help: "Embedded Menu Command enclose a bar with an outline", index: "6.5.15" },
	PACK:  					{ help: "Picture Compactor Extension pack screen data", index: "6.2.06" },
	PAINT:  				{ help: "Instruction fill a screen area with colour", index: "6.4.07" },
	PALETTE:  				{ help: "Instruction set the current screen colours", index: "6.4.06" },
	PAPER:  				{ help: "Instruction set the colour of text background", index: "5.6.02" },
	PAPER$:  				{ help: "Function give control index number to set background colour", index: "5.6.03" },
	PARALLEL_ABORT:  		{ help: "Instruction stop a parallel operation", index: "10.5.02" },
	PARALLEL_BASE:  		{ help: "Function get the base address of the Parallel Port", index: "10.5.03" },
	PARALLEL_CHECK:  		{ help: "Function report the avallablitity of the Parallel port", index: "10.5.02" },
	PARALLEL_CLOSE:  		{ help: "Instruction close the Parallel Port", index: "10.5.01" },
	PARALLEL_ERROR:  		{ help: "Function check for an error in transmission via Parallel Port", index: "10.5.02" },
	PARALLEL_INPUT$:  		{ help: "Function read a string from the Parallel Port", index: "0.5.02" },
	PARALLEL_OPEN:  		{ help: "Instruction open the Parallel Port for reading and writing", index: "10.5.01" },
	PARALLEL_OUT:  			{ help: "Instruction send data from memory to the Parallel Port", index: "10.5.02" },
	PARALLEL_SEND:  		{ help: "Instruction send a string of characters to the Parallel Port", index: "10.5.01" },
	PARALLEL_STATUS:  		{ help: "Function report the current status of the Parallel Port", index: "10.5.03" },
	PARAM:  				{ help: "Function return a parameter from a procedure", index: "5.5.08" },
	PARAM#:  				{ help: "Function return a real number variable from a procedure", index: "5.5.08" },
	PARAM$:  				{ help: "Function return a string variable from a procedure", index: "5.5.08" },
	PARENT:  				{ help: "Instruction negotiate a path through the current directory", index: "10.2.05" },
	PASTE_BOB:  			{ help: "Instruction draw an image from the Object bank", index: "7.2.08" },
	PASTE_ICON:  			{ help: "Instruction draw an Icon", index: "7.7.02" },
	PAttern:  				{ help: "Embedded Menu Command set a pattern", index: "6.5.15" },
	Pause:  				{ help: "AMAL Instruction pause an AMAL program", index: "7.6.06" },
	PEEK:  					{ help: "Function read a byte from an address", index: "14.A.03" },
	PEEK$:  				{ help: "Function read a string of characters from memory", index: "14.A.05" },
	PEN:  					{ help: "Instruction set the colour for text and drawing operations", index: "5.6.02" },
	PEN$:  					{ help: "Function give a control index number to set pen colour", index: "5.6.02" },
	PHYBASE:  				{ help: "Function give address of the current screen", index: " 6.2.04" },
	PHYSIC:  				{ help: "Function give the physical screen number", index: "6.2.04" },
	PI#:  					{ help: "Function give a constant PI", index: "5.3.07" },
	PICTURE:  				{ help: "Function give mask data of an IFF image", index: "7.5.07" },
	PLAY:  					{ help: "Instruction play a voice", index: "8.1.04" },
	PLAY_OFF:  				{ help: "Instruction stop playing a voice", index: "8.1.04" },
	PLay:  					{ help: "AMAL Instruction create a movement path", index: "7.6.07" },		
	PLOAD:  				{ help: "Instruction load machine code from memory", index: "14.A.14" },
	PLOT:  					{ help: "Instruction plot a single point", index: "6.4.01" },
	PO:  					{ help: "Interface Instruction print hollow outline text", index: "9.2.04" },
	POF:  					{ help: "Reserved Variable hold the current position of the file pointer", index: "10.2.13" },
	POINT:  				{ help: "Function give the colour of a point", index: "6.4.01" },
	POKE:  					{ help: "Instruction change a byte at an address", index: "14.A.03" },
	POKE$:  				{ help: "Instruction poke a string of characters into memory", index: "14.A.04" },
	POLYGON:  				{ help: "Instruction draw a filled polygon", index: "6.4.08" },
	POLYLINE:  				{ help: "Instruction draw multiple lines", index: "6.4.03" },
	POP:  					{ help: "Instruction remove Return information", index: "5.4.02" },
	POP_PROC:  				{ help: "Structure leave a procedure immediately", index: "5.5.03" },
	PORT:  					{ help: "Function test the readiness of a device", index: "10.3.07" },
	PR:  					{ help: "Interface Instruction print the contents of a variable to the screen", index: "9.1.04" },
	PRG_STATE:  			[ syntax: 'n', javascript: 'AMOS.prgState( )', help: "Function return status of how current program was run", index: "11.4.04" } ],
	PRG_UNDER:  			[ syntax: 'n', javascript: 'AMOS.prgUnder( )', help: "Function report the availability of program under current program", index: "11.4.03" } ],
	PRINT:  				{ help: "Instruction print items on screen", index: "5.6.01" },
	PRINT#:  				{ help: "Structure print variables to a file or device", index: " 10.2.12" },
	PRINTER_ABORT:  		{ help: "Instruction stop a printer operation", index: "10.3.05" },
	PRINTER_BASE:  			{ help: "Function get the address of printer base", index: "10.3.06" },
	PRINTER_CHECK:  		{ help: "Function give status of printer", index: "10.3.05" },
	PRINTER_CLOSE:  		{ help: "Instruction close printer port", index: "10.3.01" },
	PRINTER_DUMP:  			{ help: "Instruction print the contents of a screen", index: "10.3.03" },
	PRINTER_ERROR:  		{ help: "Function check for an error in a printing operation", index: "10.3.06" },
	PRINTER_ONLINE:  		{ help: "Function report if printer is on-line", index: "10.3.06" },
	PRINTER_OPEN:  			{ help: "Instruction open printer device", index: "10.3.01" },
	PRINTER_OUT:  			{ help: "Instruction print data from an address", index: "10.3.05" },
	PRINTER_SEND:  			{ help: "Instruction send a string to the printer", index: "10.3.01" },
	PRIORITY_OFF:  			{ help: "Instruction set Bob priority to default status", index: " 7.2.05" },
	PRIORITY_ON:  			{ help: "Instruction set Bob priority to highest y-coordinate", index: "7.2.05" },
	PRIORITY_REVERSE_OFF:  	{ help: "Instruction toggle off reverse priority of Bobs", index: "7.2.05" },
	PRIORITY_REVERSE_ON:  	{ help: "Instruction toggle on reverse priority of Bobs", index: "7.2.05" },
	PROC:  					{ help: "Structure call a procedure", index: "5.5.02" },
	PRoc:  					{ help: "Embedded Menu Command call a procedure", index: "6.5.1" },
	PROCEDURE:  			{ help: "Structure create a procedure", index: "5.5.01" },
	PRUN:  					[ syntax: 'iS', javascript: 'AMOS.prun( 1 )', help: "Instruction run a program from memory", index: "11.4.02" },
	PU:  					{ help: "Interface Instruction push image to an offset position in the Resource Bank", index: "9.4.03" },
	PUT:  					{ help: "Instruction output a record to a random access file", index: "10.2.15" },
	PUT_BLOCK:  			{ help: "Instruction copy a block onto screen", index: "7.7.03" },
	PUT_BOB:  				{ help: "Instruction put a fixed copy of Bob onto screen", index: "7.2.08" },
	PUT_CBLOCK:  			{ help: "Instruction display a compacted block on screen", index: "7.7.05" },
	PUT_KEY:  				{ help: "Instruction load a string into the keyboard buffer", index: "10.1.05" },
	RADIAN:  				{ help: "Instruction use radians", index: "5.3.08" },
	RAIN:  					{ help: "Reserved Variable change the colour of a rainbow line", index: "6.3.05" },
	RAINBOW:  				{ help: "Instruction display a rainbow", index: "6.3.05" },
	RAINBOW_DEL:  			{ help: "Instruction delete a rainbow", index: "6.3.05" },
	RANDOMIZE:  			{ help: "Instruction set random number seed", index: "5.3.10" }," },
	RDIALOG:  				{ help: "Function read the status of a zone or a button", index: "9.3.04" },
	RDIALOG$:  				{ help: "Function return text string entered into an edit zone", index: "9.3.04" },
	READ:  					{ help: "Structure read data into a variable", index: "5.4.13" },
	READ_TEXT$:  			{ help: "Instruction display a text window on screen", index: "5.7.06" },
	REM:  					{ syntax: 'i(doRem)', javascript: '', { help: "Structure insert a reminder message or comment into program listing", index: " 5.1.1" } },
	REMEMBER_X:  			{ help: "Instruction restore the x-coordinate of the text cursor", index: "5.6.10" },
	REMEMBER_Y:  			{ help: "Instruction restore the y-coordinate of the text cursor", index: "5.6.10" },
	RENAME:  				{ help: "Instruction rename a file", index: "10.2.08" },
	REPEAT:  				{ help: "Structure mark the start of a conditional loop", index: "5.4.08" },
	REPEAT$:  				{ help: "Function repeat a string", index: "5.2.04" },
	REQUEST_OFF:  			{ help: "Instruction cancel the requester", index: "11.5.06" },
	REQUEST_ON:  			{ help: "Instruction use the AMOS Professional system requester", index: "11.5.06" },
	REQUEST_WB:  			{ help: "Instruction use the Workbench system requester", index: "11.5.06" },
	REserve:  				{ help: "Embedded Menu Command reserve data area for a procedure", index: "6.5.17" },
	RESERVE_AS_CHIP_DATA  	{ help: "Instruction reserve a new chip data bank", index: "5.9.03" },
	RESERVE_AS_CHIP_WORK:  	{ help: "Instruction reserve a new chip work bank", index: "5.9.03" },
	RESERVE_AS_DATA:  		{ help: "Instruction reserve a new data bank", index: "5.9.02" },
	RESERVE_AS_WORK:  		{ help: "Instruction reserve a new work bank", index: "5.9.02" },
	RESERVE_ZONE:  			{ help: "Instruction allocate memory for screen zone", index: "7.4.06" },
	RESET_ZONE:  			{ help: "Instruction erase screen zone ", index: "7.4.07" },
	RESOURCE$:  			{ help: "Function read a message from the Resource Bank", index: "9.4.03" },
	RESOURCE_BANK:  		{ help: "Instruction select a bank to be used for resources", index: "9.4.03" },
	RESOURCE_SCREEN_OPEN:  	{ help: "Instruction open a screen using resource settings", index: "9.4.04" },
	RESOURCE_UNPACK:  		{ help: "Instruction unpack an image from the Resource Bank", index: "9.4.04" },
	RESTORE:  				{ help: "Structure set the current Read pointer", index: "5.4.13" },
	RESUME:  				{ help: "Structure resume program after error trapping", index: "12.2.02" },
	RESUME_LABEL:  			{ help: "Structure jump to label after error trapping", index: "12.2.03" },
	RETURN:  				{ help: "Instruction return from a sub-routine", index: "5.4.022" },
	REV:  					{ help: "Function double-flip an image vertically and horizontally", index: " 7.2.12" },
	RIGHT$:  				{ help: "Function give the rightmost characters of a string", index: "5.2.01" },
	RND:  					{ help: "Function generate random number", index: "5.3.10" },
	ROL_B:  				{ help: "Instruction rotate left the first 8 bits of a value", index: "14.A.09" },
	ROL_L:  				{ help: "Instruction rotate left the entire number", index: "14.A.09" },
	ROL_W:  				{ help: "Instruction rotate left the bottom 16 bits of a value", index: "14.A.09" },
	ROR_B:  				{ help: "Instruction rotate right the first 8 bits of a value", index: "14.A.10" },
	ROR_L:  				{ help: "Instruction rotate right the entire number", index: "14.A.10" },
	ROR_W:  				{ help: "Instruction rotate right the bottom 16 bits of a value", index: "14.A.10" },
	RT:  					{ help: "Interface Instruction return from an Interface sub-routine", index: "9.2.07" },
	RU:  					{ help: "Interface Instruction run until conditions are satisfied", index: "9.1.08" },
	RUN:  					{ help: "Instruction execute an AMOS Professional program", index: "10.2.08" },
	SA:  					{ help: "Interface Instruction save background under a dialogue box", index: "9.1.08" },
	SAM_BANK:  				{ help: "Instruction change the current sample bank", index: "8.2.03" },
	SAM_LOOP_OFF:  			{ help: "Instruction toggle off repetition loop of sample", index: "8.2.04" },
	SAM_LOOP_ON:  			{ help: "Instruction toggle on repetition loop of a sample", index: "8.2.04" },
	SAM_PLAY:  				{ help: "Instruction play a sample from the sample bank", index: "8.2.01	" },	
	SAM_RAW:  				{ help: "Instruction play a raw sample from memory", index: "8.2.03" },
	SAM_STOP:  				{ help: "Instruction stop one or more samples playing", index: "8.2.02" },
	SAM_SWAP:  				{ help: "Instruction activate sample-switching system", index: "8.2.06" },
	SAM_SWAPPED:  			{ help: "Function test for a successful sample swap", index: "8.2.06" },
	SAMPLE:  				{ help: "Instruction assign a sample to the current wave", index: "8.1.07" },
	SAVE_IFF:  				{ help: "Instruction save an IFF screen to disc", index: "6.1.11" },
	SAVE:  					{ help: "Instruction save one or more memory banks to disc", index: " 5.9.03" },
	SAY:	  				[ syntax: 'iS, n', javascript: 'AMOS.say( 1, 2 )',{ help: "Instruction speak a phrase", index: "11.2.01" } ],
	SC:  					{ help: "AMAL Function check for Sprite collision", index: "7.6.09" },
	SCAN$:  				{ help: "Function return a scan-code for use with Key$ function", index: "10.1.06" },
	SCANCODE:  				{ help: "Function give the scancode of a key", index: "10.1.01" },
	SCANSHIFT:  			{ help: "Function give shift status of key", index: "10.1.02" },
	SCIN:  					{ help: "Function give screen number at hardware coordinates", index: "6.1.11" },
	SCREEN:  				{ help: "Instruction set the current screen", index: "6.1.09" },
	SCREEN:  				{ help: "Function give the current screen number", index: "6.1.10" },
	SCREEN_BASE:  			{ help: "Function get screen table", index: "5.9.11" },
	SCREEN_CLONE:  			{ help: "Instruction clone a screen", index: "6.1.06" },
	SCREEN_CLOSE:  			{ help: "Instruction erase a screen", index: "6.1.03" },
	SCREEN_COLOUR:  		{ help: "Function give maximum number of available screen colours", index: "6.1.10" },
	SCREEN_COPY:  			{ help: "Instruction copy an area of screen", index: "6.2.01" },
	SCREEN_DISPLAY:  		{ help: "Instruction position a screen", index: "6.1.04" },
	SCREEN_HEIGHT:  		{ help: "Function give the current screen height", index: "6.1.10" },
	SCREEN_HIDE:  			{ help: "Instruction hide a screen", index: "6.1.08" },
	SCREEN_MODE:  			{ help: "Function return screen mode", index: "6.1.13" },
	SCREEN_OFFSET:  		{ help: "Instruction offset the screen at hardware coordinates", index: "6.1.05" },
	SCREEN_OPEN:  			{ help: "Instruction open a new screen", index: "6.1.01" },
	SCREEN_SHOW:  			{ help: "Instruction show a screen", index: "6.1.08" },
	SCREEN_:  				{ help: "SWAP Instruction swap over the logical and physical screens", index: "6.2.03" },
	SCREEN_TO_BACK:  		{ help: "Instruction move screen to the back of the display", index: "6.1.09" },
	SCREEN_TO_FRONT:  		{ help: "Instruction move screen to the front of the display", index: "6.1.08" },
	SCREEN_WIDTH:  			{ help: "Function give the current screen width", index: "6.1.10" },
	SCROLL:  				{ help: "Instruction scroll a screen zone", index: "6.2.02" },
	SCROLL_OFF:  			{ help: "Instruction toggle window scroll off", index: "5.7.04" },
	SCROLL_ON:  			{ help: "Instruction toggle window scroll on", index: "5.7.04" },
	SERIAL_ABORT:  			{ help: "Instruction stop current data transfer", index: "10.4.06" },
	SERIAL_BASE:  			{ help: "Function get the address of the serial base 10.4.06" },
	SERIAL_BITS:  			{ help: "Instruction set the number of bits for transmission of characters", index: "10.4.02" },
	SERIAL_BUF:  			{ help: "Instruction set the size of the serial buffer", index: "10.4.04" },
	SERIAL_CHECK:  			{ help: "Function report curent serial device activity", index: "10.4.05" },
	SERIAL_CLOSE:  			{ help: "Instruction close one or more serial channels", index: "10.4.02" },
	SERIAL_ERROR:  			{ help: "Function report success or failure of last data transfer", index: "10.4.05" },
	SERIAL_FAST:  			{ help: "Instruction engage fast mode for data transfer", index: "10.4.04" },
	SERIAL_GET:  			{ help: "Function get a byte from a serial channel", index: "10.4.03
	SERIAL_INPUT$:  		{ help: "Function get a string from the serial port", index: "10.4.04" },
	SERIAL_OPEN:  			{ help: "Instruction open a channel for serial input/output", index: "10.4.01" },
	SERIAL_OUT:  			{ help: "Instruction output a block of raw data via a serial channel", index: "10.4.03	" },	
	SERIAL_PARITY:  		{ help: "Instruction set parity checking for a serial channel", index: "10.4.02" },
	SERIAL_SEND:  			{ help: "Instruction output a string via a serial channel", index: "10.4.03" },
	SERIAL_SLOW:  			{ help: "Instruction re-set slow mode for data transfer", index: "10.4.04" },
	SERIAL_SPEED:  			{ help: "Instruction set the transfer rate for a serial channel", index: "10.4.02" },
	SERIAL_STATUS:  		{ help: "Function report the status of the Serial Port", index: "10.4.05" },
	SERIAL_X:  				{ help: "Instruction set handshaking system for serial channel", index: "10.4.03" },
	SET_ACCESSORY:  		{ help: "Instruction define an accessory program", index: "13.1.01" },
	SET_BOB:  				{ help: "Instruction set drawing mode for Bobs", index: "7.3.07" },
	SET_BUFFER:  			{ syntax: 'iN', javascript: '', { help: "Instruction set the size of the variable area", index: "5.1.04" } },
	SET_CURS:  				{ help: "Instruction set the shape of the text cursor", index: "5.6.10" },
	SET_DIR:  				{ help: "Instruction set the directory style", index: "10.2.04" },
	SET_DOUBLE_PRECISION:  	{ help: "Instruction engage double precision accuracy", index: "5.3.06" },
	SET_ENVEL:  			{ help: "Instruction create a volume envelope", index: "8.1.08" },
	SET_EQUATE_BANK:  		{ syntax: 'iN', javascript: '', help: "Instruction set up the automatic equate system", index: "11.5.03" } ],
	SET_FONT:  				[ syntax: 'iN', javascript: 'AMOS.setFont( 1 )', help: "Instruction select font for use by the Text command", index: "11.1.02" } ],
	SET_HARDCOL:  			{ help: "Instruction set hardware register for Sprite collision detection", index: "7.4.05" },
	SET_INPUT:  			{ help: "Instruction set end-of-line characters", index: "10.2.13" },
	SET_LINE:  				{ help: "Instruction set a line style", index: "6.4.03" },
	SET_MENU:  				{ help: "Instruction move a menu item", index: "6.5.11" },
	SET_PAINT:  			{ help: "Instruction toggle outline mode", index: "6.4.10" },
	SET_PATTERN:  			{ help: "Instruction select a fill pattern", index: "6.4.08" },
	SET_RAINBOW:  			{ help: "Instruction define a rainbow", index: "6.3.04" },
	SET_SLIDER:  			{ help: "Instruction set a fill pattern for a slider bar", index: "5.7.05" },
	SET_SPRITE_BUFFER:  	{ help: "Instruction the the maximum height of Sprites", index: "7.1.08" },
	SET_STACK:  			{ help: "Instruction set stack space", index: "5.5.01" },
	SET_TAB:  				{ help: "Instruction change Tab setting", index: "5.6.08" },
	SET_TALK:  				[ syntax: 'iN,N,N,N', javascript: 'AMOS.setTalk( 1, 2, 3, 4 )',{ help: "Instruction set the style of synthetic speech", index: " 11.2.01" },
	SET_TEMPRAS:  			{ help: "Instruction set temporary raster", index: "6.4.11" },
	SET_TEXT:  				{ help: "Instruction set the style of text font", index: " 5.6.04" },
	SET_WAVE:  				{ help: "Instruction define a wave form", index: "8.1.05" },
	SET_ZONE:  				{ help: "Instruction set a screen zone for testing", index: "7.4.06" },
	SFont:  				{ help: "Embedded Menu Command set font", index: "6.5.14" },
	SF:  					{ help: "Interface Instruction select font to be assigned to text", index: "9.2.05" },
	SGN:  					{ help: "Function give the sign of a number", index: "5.3.04
	SH:  					{ help: "Interface Function read the height of the current screen", index: "9.2.01" },
	SHADE_OFF:  			{ help: "Instruction toggle text shading off", index: "5.6.03" },
	SHADE_ON:  				{ help: "Instruction toggle text shading on", index: "5.6.03" },
	SHARED:  				{ help: "Structure define a list of shared variables", index: "5.5.05" },
	SHIFT_DOWN:  			{ help: "Instruction rotate colour values downwards", index: "6.3.03" },
	SHIFT_OFF:  			{ help: "Instruction turn off colourshifts for current screens", index: " 6.3.04" },
	SHIFT_UP:  				{ help: "Instruction rotate colour values upwards", index: "6.3.03" },
	SHOOT:  				{ help: "Instruction generate percussion sound effect", index: "8.1.01" },
	SHOW:  					{ help: "Instruction reveal the mouse pointer back on screen", index: "5.8.03" },
	SHOW_ON:  				{ help: "Instruction reveal the mouse pointer immediately", index: "5.8.03" },
	SI:  					{ help: "Interface Instruction define the size of graphics to be saved", index: " 9.1.07" },
	SIN:  					{ help: "Function give the sine of an angle", index: "5.3.08" },
	SL:  					{ help: "Interface Instruction set the style of a line", index: "9.2.04" },
	SLine:  				{ help: "Embedded Menu Command set line pattern", index: "6.5.15" },
	SLOAD:  				{ help: "Instruction load a section of a sample", index: "8.2.05" },
	SM:  					{ help: "Interface Instruction move a screen linked to the mouse pointer", index: " 9.3.17" },
	SORT:  					{ help: "Instruction sort all elements in an array", index: "5.2.05" },
	SP:  					{ help: "Interface Instruction set the fill pattern for a dialogue box", index: "9.2.03" },
	SPACE$:  				{ help: "Function space out a string", index: "5.2.04" },
	SPACK:  				{ help: "Picture Compactor Extension pack a screen", index: "6.2.05" },
	SPRITE:  				{ help: "Instruction display a Sprite on screen", index: "7.1.04" },
	SPRITE_BASE:  			{ help: "Function get Sprite table", index: "5.9.11" },
	SPRITEBOB_COL:  		{ help: "Function test for a collision between Sprite and Bobs", index: "7.4.04" },
	SPRITE_COL:  			{ help: "Function test for a collision between Sprites", index: "7.4.03" },
	SPRITE_OFF:  			{ help: "Instruction remove Sprites from the screen", index: "7.1.08" },
	SPRITE:  				{ help: "UPDATE Instruction control Sprite movements", index: "7.1.08" },
	SPRITE_UPDATE_OFF:  	{ help: "Instruction turn off automatic Sprite updating", index: "7.1.08" },
	SPRITE_UPDATE_ON:  		{ help: "Instruction turn on automatic Sprite updating", index: "7.1.08" },
	SSAVE:  				{ help: "Instruction save a data chunk anywhere into an existing file", index: "8.2.05" },
	SQR:  					{ help: "Function calculate square root of a number", index: "5.3.06" },
	SStyle:  				{ help: "Embedded Menu Command set font style", index: "6.5.15" },
	START:  				{ help: "Function give the address of a memory bank", index: "5.9.09" },
	STEP:  					{ help: "Structure control the increment index in a loop", index: "5.4.09
	STOP:  					{ syntax: 'i', javascript: 'AMOS.stop();', { help: "Instruction interrupt the current program", index: "5.1.08" } },
	STR$:  					{ help: "Function convert a number into a string", index: "5.2.03" },
	STRUC:  				{ syntax: 'z', javascript: '0', help: "Reserved Variable access internal data structure", index: "11.5.04" } ],
	STRUC$:  				{ syntax: 'zN', javascript: '""', help: "Function read or write a string pointer to a structure", index: "11.5.05" } ],
	STRING$:  				{ syntax: 'sN,S', javascript: '', help: "Function create a new string from an existing string", index: "5.2.04" } ],
	SV:  					{ help: "Interface Instruction set an Interface variable", index: "9.1.03" },
	SW:  					{ help: "Interface Function read the width of the current screen", index: "9.2.01" },
	SW:  					{ help: "Interface Instruction set the writing mode for text and graphics", index: "9.2.05" },
	SWAP:  					{ help: "Structure swap over the contents of two variables", index: "5.4.06" },
	SX	  					{ help: "Interface Function get the width of a dialogue box ", index: "9.2.01" },
	SY:  					{ help: "Interface Function get the height of a dialogue box", index: "9.2.01" },
	SYNCHRO:  				{ help: "Instruction execute an AMAL program directly", index: "7.6.13" },
	SYNCHRO_OFF:  			{ help: "Instruction turn off interrupts", index: "7.6.13" },
	SYNCHRO_ON:  			{ help: "Instruction turn on interrupts", index: "7.6.13" },
	SYSTEM:  				{ syntax: 'i', javascript: 'AMOS.system();', { help: "Instruction leave AMOS Professional and go to the Workbench", index: "5.1.09" } },
	SZ:  					{ help: "Interface Instruction save a parameter for the next zone definition", index: "9.2.09" },
	TAB$:  					{ help: "Function move the text cursor to the next Tab position", index: "5.6.07" },
	TALK_MISC:  			[ syntax: 'iN,N', javascript: 'AMOS.talkMisc( 1, 2 )', help: "Instruction set narrator voice", index: "11.2.02" } ],
	TALK_STOP:  			[ syntax: 'i', javascript: 'AMOS.talkStop( )',  help: "Instruction stop synthetic speech", index: "11.2.02" } ],
	TAN:  					{ help: "Function give the tangent of an angle", index: "5.3.09" },
	TEMPO:  				{ help: "Instruction change the speed of a piece of music", index: "8.3.02" },
	TEXT:  					[ syntax: 'iN,N,S', javascript: 'AMOS.text( 1, 2, 3 )', help: "Instruction print graphic text", index: "11.1.03" } ],
	TEXT_BASE:  			[ syntax: 'n', javascript: 'AMOS.getTextBase()', help: "Function give the text base of the current character set", index: "11.1.03" } ],
	TEXT_LENGTH:  			[ syntax: 'nS', javascript: 'AMOS.getTextLenght( 1 )', help: "Function give the length of a section of graphical text", index: "11.1.03" } ],
	TEXT_STYLES:  			[ syntax: 'sN', javascript: 'AMOS.getTextStyles( 1 )', help: "Function give the current text styles", index: "5.6.04" } ], 		
	TH:  					{ help: "Interface Function return the height of the current font, in pixels", index: "9.2.05" },
	THEN:  					{ help: "Structure determine action after If", index: "5.4.03" },
	TIMER:  				{ help: "Reserved Variable count in intervals of 50ths of a second", index: "5.3.11" },
	TITLE_BOTTOM:  			{ help: "Instruction set a title at the bottom of the current window", index: "5.7.02" },
	TITLE_TOP:  			{ help: "Instruction set a title at the top of the current window", index: "5.7.02" },
	TL:  					{ help: "Interface Function return the number of characters in a string of text", index: "9.2.05" },
	TO:  					{ help: "Structure mark the end of a loop ", index: "5.4.09" },
	To:  					{ help: "AMAL Structure mark end of a loop", index: "7.6.05" },
	TRACK_LOAD:  			{ help: "Instruction load a Tracker music module", index: "8.3.02" },
	TRACK_LOOP_OFF:  		{ help: "Instruction turn off a Tracker module loop", index: "8.3.03" },
	TRACK_LOOP_ON:  		{ help: "Instruction loop a Tracker module", index: "8.3.03" },
	TRACK_PLAY:  			{ help: "Instruction play a Tracker module", index: "8.3.02" },
	TRACK_STOP:  			{ help: "Instruction stop all Tracker music", index: "8.3.03" },
	TRAP:  					{ help: "Instruction trap an error", index: "12.2.04" },
	TRUE:  					{ help: "Function holds the value of -1 if a condition is true", index: "5.4.06" },
	TW:  					{ help: "Interface Function return the width of current font text, in pixels", index: "9.2.05" },
	UI:  					{ help: "Interface Instruction create a user-defined Interface command", index: "9.2.08" },
	UN:	  					{ help: "Interface Instruction unpack an image from the Resource Bank", index: "9.4.01" },
	UNDER_OFF:  			{ help: "Instruction toggle text underlining off", index: "5.6.03" },
	UNDER_ON:  				{ help: "Instruction toggle text underlining on", index: "5.6.03" },
	UNFREEZE:  				{ help: "Instruction unfreeze the display", index: "7.5.07" },
	UNPACK:  				{ help: "Picture Compactor Extension unpack a compacted screen", index: "6.2.06" },
	UNTIL:  				{ help: "Structure mark the end of a conditional loop", index: "5.4.08" },
	UPDATE:  				{ help: "Instruction move all Objects at once", index: "7.3.04" },
	UPDATE_EVERY:  			{ help: "Instruction control update in", index: "7.6.12" },
	UPDATE_OFF:  			{ help: "Instruction turn off the automatic Object re-drawing system", index: "7.3.04" },
	UPDATE_ON:  			{ help: "Instruction turn on the automatic Object re-drawing system", index: "7.3.04" },
	UPPER$:  				{ help: "Function convert a string of text to upper case", index: "5.2.03" },
	USING:  				{ help: "Instruction format printed output", index: "5.6.13" },
	VA:  					{ help: "Interface Function return value held by Interface item", index: "9.1.03" },
	VAL:  					{ help: "Function convert a string of digits into a number", index: "5.2.03" },
	VARPTR:  				{ help: "Function read the address of a variable", index: "14.A.06" },
	VDIALOG:  				{ help: "Function assign or read an Interface value", index: "9.3.05" },
	VDIALOG$:  				{ help: "Function assign or read an Interface string", index: "9.3.05" },
	VIEW:  					{ help: "Instruction display the current view setting", index: "6.1.04" },
	VLine:  				{ help: "Interface Instruction draw a vertical line from packed image components", index: "9.4.02" },
	VOICE:  				{ help: "Instruction activate a voice", index: "8.3.03" },
	VOLUME:  				{ help: "Instruction control the volume of sound", index: "8.3.03" },
	VREV_BLOCK:  			{ help: "Instruction flip a block vertically", index: "7.7.04" },
	VREV:  					{ help: "Function flip an image vertically", index: "7.2.11" },
	VS	  					{ help: "Interface Instruction create an animated vertical slider bar", index: "9.3.09" },
	VSCROLL:  				{ help: "Instruction scroll text vertically", index: "5.6.12" },
	VSLIDER:  				{ help: "Instruction draw a vertical slider bar", index: "5.7.05" },
	VT:  					{ help: "Interface Instruction display vertical text", index: "9.2.06" },
	VU_AMAL:  				{ help: "Function give intensity of current voice", index: "7.6.09" },
	VUMETER:  				{ help: "Function test the volume of a voice", index: "8.1.09" },		
	WAIT:  					{ syntax: 'iN', javascript: 'AMOS.wait( %0 )', { help: "Instruction wait before performing the next instruction", index: "7.6.16" } },
	WAIT_KEY:  				{ help: "Instruction wait for a key-press ", index: "10.1.04" },
	WAIT_VBLR:  			{ help: "Instruction wait for the next vertical blank period", index: "6.2.05" },
	Wait:  					{ help: "AMAL Instruction turn off main program and wait for Autotest", index: "7.6.07" },
	WAVE:  					{ help: "Instruction assign a wave to a sound channel", index: "8.1.06" },
	WEND:  					{ help: "Structure mark the end of a conditional loop", index: "5.4.08" },
	WHILE:  				{ help: "Structure mark the start of a conditional loop", index: "5.4.08" },
	WIND_CLOSE:  			{ help: "Instruction close the current window", index: "5.7.03" },
	WIND_MOVE:  			{ help: "Instruction move the current window", index: "5.7.03" },
	WIND_OPEN:  			{ help: "Instruction create a window", index: "5.7.01" },
	WIND_SAVE:  			{ help: "Instruction save the contents of the current window", index: "5.7.03" },
	WIND_SIZE:  			{ help: "Instruction change the size of the current window", index: "5.7.04" },
	WINDON:  				{ help: "Function give the value of the current window", index: "5.7.03" },
	WINDOW:  				{ help: "Instruction change the current window", index: "5.7.01" },
	WRITING:  				{ help: "Instruction select text writing mode", index: "5.6.04" },
	X_BOB:  				{ help: "Function give the x-coordinate of a Bob", index: "7.2.03" },
	X_CURS:  				{ help: "Function give the x-coordinate of the text cursor", index: "5.6.09" },
	X_GRAPHICR:  			{ help: "Function convert text x-coordinate to graphic x-coordinate", index: "11.1.04" },
	X_HARD:  				{ help: "Function convert screen x-coordinate to hardware x-coordinate", index: "7.1.10" },
	X_MENU:  				{ help: "Function give graphical x-coordinate of a menu item", index: "6.5.10" },
	X_MOUSER:  				{ help: "Reserved Variable give/set x-coordinate of mouse pointer", index: "5.8.04" },
	X_SCREEN:  				{ help: "Function convert hardware x-coordinate to screen x-coordinate", index: "7.1.09" },
	X_SPRITE:  				{ help: "Function give x-coordinate of a Sprite", index: "7.1.09" },
	X_TEXT:  				{ help: "Function convert graphic x-coordinate to text x-coordinate", index: "11.1.04" },
	XAR:  					{ help: "Interface Function get the previous x-coordinate of the graphics cursor", index: " 9.2.02" },
	XB:  					{ help: "Interface Function get the current x-coordinate of the graphics cursor", index: "9.2.02" },
	XGRR:  					{ help: "Function give x-coordinate of the graphics cursor", index: "6.4.02" },
	XH:  					{ help: "AMAL Function convert screen x-coord to hardware x-coord", index: "7.6.10" },
	XMR:  					{ help: "AMAL Function give hardware x-coord of mouse cursor", index: "7.6.10" },
	XS:  					{ help: "AMAL Function convert hardware x-coord to screen x-coord", index: "7.6.10" },
	XY:  					{ help: "Interface Instruction set graphics variables", index: "9.2.08" },
	Y_BOBR:  				{ help: "Function give the y-coordinate", index: "7.2.03" },
	Y_CURSR:  				{ help: "Function give the y-coordinate of the text cursor", index: "5.6.09" },
	Y_GRAPHIC:  			{ help: "Function convert text y-coordinate to graphic y-coordinate", index: "11.1.04" },
	Y_HARDR:  				{ help: "Function convert screen y-coordinate to hardware y-coordinate", index: "7.1.10" },
	Y_MENU:  				{ help: "Function give graphical y-coordinate of a menu item", index: "6.5.10" },
	Y_MOUSE:  				{ help: "Reserved Variable give/set y-coordinate of mouse pointer", index: "5.8.04" },
	Y_SCREENR:  			{ help: "Function convert hardware y-coordinate to screen y-coordinate", index: "7.1.09" },
	Y_SPRITER:  			{ help: "Function give the y-coordinate of a Sprite", index: "7.1.09" },
	Y_TEXTR:  				{ help: "Function convert graphic y-coordinate to text y-coordinate", index: "11.1.04" },
	YA:  					{ help: "Interface Function get the previous y-coordinate of the graphics cursor", index: "9.2.02" },
	YB:  					{ help: "Interface Function get the current y-coordinate of the graphics cursor", index: "9.2.02" },
	YGR:  					{ help: "Function give the y-coordinate of the graphics cursor", index: "6.4.02" },
	YH:  					{ help: "AMAL Function convert screen y-coord to hardware y-coord", index: "7.6.10" },
	YM:  					{ help: "AMAL Function give hardware y-coord of mouse cursor", index: "7.6.10" },
	YS:  					{ help: "AMAL Function convert hardware y-coord to screen y-coord", index: "7.6.10" }
	XTEXT:					[ syntax: 'nN', javascript: '1', help: "function convert graphic coordinates to text coordinates", index: "11.01.04" } ],
	YTEXT:					[ syntax: 'nN', javascript: '1', help: "function convert graphic coordinates to text coordinates", index: "11.01.04" } ],
	XGRAPHIC:				[ syntax: 'nN', javascript: '1', help: "functions: convert text coordinates to graphic coordinates", index: "11.01.04" } ],
	YGRAPHIC:				[ syntax: 'nN', javascript: '1', help: "functions: convert text coordinates to graphic coordinates", index: "11.01.04" } ],
		
	}